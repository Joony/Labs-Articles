labs.vertic.com Article Topics

1. IOS Development
  1.1. Introduction
    New to IOS 5.
    Why IOS 5 makes it easy for beginners.
  1.2. Storyboards in Xcode 4.2
    1.2.1. What is a Storyboard
    1.2.2. Using the Storyboard editor
    1.2.3. Segues and passing data
    1.2.4. Reverse Segues and the Delegate Pattern
  1.3. Automatic Reference Counting (ARC)
    Done at compile-time.
  1.3. NSDates
  1.4. NSArray or NSSet?
  1.5. JPEG or PNG?
  1.6. Design Patterns
    1.6.1. MVC - The Real Deal
    1.6.2. Delegate
  
  
2. Objective-C Masterclass
  2.?. Introduction
    Developers are flocking to iOS.  The allure of developing for those shinny black and white gadgets is too much for most.  But getting started can be difficult.  Most people have never used the development tools before, never-mind the strange syntax of the language used to develop iOS apps, Objective-C.  But fear not, in the next few chapters we'll discuss Objective-C in real terms, and hopefully give you the building blocks needed to fast-forward your learning and get to the good stuff.
    2.?.1. A Brief History
      Objective-C is, in simplified terms, a pre-processor that adds object oriented capabilities to C, making it essentially an object oriented extension of the C language.  More technically, Objective-C is a strict superset of C, meaning any C program compilable by an Objective-C compiler and allowing C code to be used within Objective-C classes.  In fact, all non-object-oriented operations are identical to that of C.  
      2.?.1.?. Message Passing
        The syntax and object model used by Objective-C is borrowed from its object model and syntax from Smalltalk.  Unlike languages that use the Simula object model of "calling a method" of an object instance, Objective-C "passes messages."  These aren't just different names for the same thing, but refer to how blocks of code are found.  In Simula style languages method names are bound to blocks of code by the compiler.  Objective-C waits until runtime to dynamically resolve the receiver of a message.  This is an important point to note and its relevance will become clear soon.
      2.?.1.?. Typing
        
        The fundamental difference (C++ = statically typed, Obj-C = dynamically typed/reflective).
  2.?. C - The Basics
    Now it's time for the obligatory Hello World example.
    
    #include <stdio.h>
    main()
    {
      printf("hello, world\n");
    }
    
    This is possibly the simplest program you can get in C.  Let me explain a little bit about what's going on here.
    
    The #include is a pre-processor directive to load the stdio (standard input/output) library.  A library that provides functions to retrieve input from the user and to output to various devices like the screen.
    
    Execution of every C program starts with the required "main" function.
    
    printf (print formatted) is used to output text.
    
    The \n (new line) character is explicitly required.  Without it the output from the program would share the same line as the command prompt for the next command.
    
    Save this as a plain text file called "hello.c"
    
    This can be compiled (using the gcc compiler in this example) by running the following command:
    gcc -o hello hello.c
    
    Once it's compiled the new program can be run like so:
    ./hello
    
    And the output should look like this:
    hello, world
    
    Because Objective-C is just an extension of C, every Objective-C program starts the same way, with a plain C "main" function.
    
  2.?. Code Reuse
    The main reason for developing Objective-C was to create a means to facilitate the creation of interchangeable software components.  Computers were becoming smaller and faster and, in relation, software was becoming increasingly complex.  Objective-C was born out of the desire to better structure code for reuse later.  The requirements for interchangeable software components are:
      Support for objects in a flexible manner
      A usable set of libraries
      Code to be easily bundled in a single cross-platform format
    
  2.?. Hello World
  2.?. Classes
  2.?. NSObjects
  2.?. Protocols
  2.?. Categories
  2.?. Block objects
  

4. StyleDoc
  4.1. The Problem
  4.2. The Proposed Solution
  4.3. In practice


5. "Tools for the Toolbox" (Patrick Wheeler and Jason Gauci from Programming Throwdown)
  5.?. Introduction
  5.?. Assembly
  
  5.?. Procedural
  5.?.1 Introduction
  5.?.2 C
    Designed to be processed on line at a time.
    Starts with main function.
    Low-level.  You can write assembly code inline with your C code. ASM() and input assembly code.
    Manual memory management.  
  
  5.?. Object Oriented
  5.?.1. Introduction
  5.?.?. Simula
    The father of Object Oriented languages.
  5.?.?. Smalltalk
    More is derived from Smalltalk than people give it credit for.
  5.?.2. Python
  5.?.3. Java
  5.?.4. C#
  5.?.5. Objective-C
    
  5.?. Functional
  5.?.1 Introduction
  5.?.2. Lisp
  5.?.3. Erlang  
  
  5.?. Compiled
  5.?. Scripted
  5.?. Virtual Machine
    
  5.?. JavaScript
    5.?.?. Google's V8 Engine
      5.?.?.?. Node.js
    5.?.?. Google's Closure Compiler
    5.?.?. The Assemble Language of the Web
      5.?.?.?. Coffee Script
    5.?.?. Debugging
      5.?.?.?. Logging
      5.?.?.?. The "debugger" Keyword
      5.?.?.?. assert() and jsUnit
      5.?.?.?. jsUnit
      5.?.?.?. Using a Pre-processor
    5.?.?. Execution Contexts (Scope)
      5.?.?.?. Global Scope
      5.?.?.?. Function Scope
    5.?.?. Function Definitions
    5.?.?. Function Expressions
    5.?.?. Variable Objects
    5.?.?. Activation Objects
    5.?.?. Wat?
      
  5.?. Scheme
  5.?. Scala
  5.?. Clojure
  
  5.?. Parser Generators
